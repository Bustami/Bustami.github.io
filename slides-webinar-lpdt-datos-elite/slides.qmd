---
title: "¿Cómo obtener datos del fútbol élite?"
author: "Ismael Gómez Schmidt"
format:
  revealjs:
    slide-number: true
    logo: images/logo.png
    incremental: true
    preview-links: true
editor: visual
title-slide-attributes:
      data-background-color: "#0096c7"
execute:
  echo: true
  eval: false
  warning: false
  fig-align: center
---

```{r include=FALSE}
#| eval: true
#| echo: false
library(readr)
library(dplyr)
library(kableExtra)
library(StatsBombR)
library(worldfootballR)
library(stringr)
library(purrr)
```

## Bienvenidos!

![](images/me.png){fig-align="center" width="90%" height="90%"}

## ¿Qué haremos?

-   Contexto: Flujo de trabajo en ciencia de datos (Enfoque: **Obtener datos**)

-   Tipos de datos

-   ¿En qué sentido "**Élite**"?

-   ¿Cómo conseguimos datos?

-   3 Ejemplos

## Contexto: Flujo de trabajo en ciencia de datos

![](images/workflow.png){fig-align="center" width="80%" height="80%"}

## R + RStudio + paquetes especializados

![](images/workflow_r.png){fig-align="center" width="90%" height="90%"}

## Enfoque: obtención de datos

![](images/workflow_r_get_data.png){fig-align="center" width="90%" height="90%"}

## Enfoque: obtención de datos

![](images/workflow_r_get_data.png){fig-align="center" width="90%" height="90%"}

![](images/asesorias.jpg){style="position: absolute; bottom: -4px; right: -100px; width: 200px;"}
![](images/viz-2d.jpg){style="position: absolute; bottom: -5px; right: 100px; width: 200px;"}
![](images/curso.png){style="position: absolute; bottom: -5px; right: 300px; width: 200px;"}

## Tipos de datos {background-color="black"}

![](images/cat_datos.png){fig-align="center"}

## ¿En qué sentido "Élite"?

- Tipos de datos de un nivel profesional:
  - calidad y precisión
  - tipo de detalles o granularidad

- Principales ligas o torneos del mundo

## ¿Cómo conseguimos datos?

-   Proveedores pagados y/o dispositivos propios

-   **Datos abiertos**

-   **Web scraping**

## Proveedores o dispositivos pagados

![](images/providers.png){fig-align="center"}

## Datos abiertos de Eventing {.smaller}

::: {layout-ncol="2"}
<br> ![](images/statsbomb.jpg){fig-align="center" width="40%" height="40%"}<br> [Open Data de Statsbomb](https://statsbomb.com/what-we-do/hub/free-data/)

![](images/wyscout.png){fig-align="center" width="40%" height="40%"}<br> [Open data de Wyscout](https://figshare.com/collections/Soccer_match_event_dataset/4415000/2)
:::

::: footer
Son solo datos de **algunos** torneos que **ya se jugaron**!
:::

## Ejemplo 1: Statsbomb {.smaller}

::: nonincremental
-   Código

```{r}
install.packages("StatsBombR")
library(StatsBombR)
competitions = FreeCompetitions()

```

-   Data

```{r}
#| eval: true
#| echo: false

competitions = read_csv("data/competitions.csv")
knitr::kable(competitions) %>% 
  kable_styling("striped", full_width = F, font_size = 12, position = "center") %>% 
  scroll_box(width = "99%", height = "350px")
```
:::

::: footer
**Competencias (ligas, torneos, copas, etc.) disponibles en el proyecto Open Data de Statsbomb**
:::

## Ejemplo 1: Statsbomb {.smaller}

::: nonincremental
-   Código

```{r}
euro_2020 = competitions %>%
            filter(competition_name == "UEFA Euro")
euro_2020_games = FreeMatches(euro_2020)
```

-   Data

```{r}
#| eval: true
#| echo: false

euro_2020_games = read_csv("data/euro_2020_games.csv")
knitr::kable(euro_2020_games) %>% 
  kable_styling("striped", full_width = F, font_size = 12, position = "center") %>% 
  scroll_box(width = "99%", height = "350px")
```
:::

::: footer
**Información de los partidos de la competencia elegida**
:::



## Ejemplo 1: Statsbomb {.smaller}

::: nonincremental
-   Código

```{r}
euro_2020_eventing <- StatsBombFreeEvents(MatchesDF = euro_2020_games)
euro_2020_eventing_clean = allclean(euro_2020_eventing)
```

-   Data

```{r}
#| eval: true
#| echo: false

euro_2020_eventing_clean = read_csv("data/euro_2020_eventing_clean.csv") %>% 
                           head(10)

knitr::kable(euro_2020_eventing_clean) %>% 
  kable_styling("striped", full_width = F, font_size = 12, position = "center") %>% 
  scroll_box(width = "99%", height = "350px")
```
:::

::: footer
**Finalmente, los datos de eventing de los partidos de la competencia elegida.**
:::


## Ejemplo 1: Statsbomb

::: {layout-ncol="2"}
![](images/exampleB.png){fig-align="center" width="60%" height="60%"}<br> ![](images/exampleF.png){fig-align="center" width="60%" height="60%"}<br>

![](images/exampleD.png){fig-align="center" width="70%" height="70%"}<br> ![](images/exampleH.png){fig-align="center" width="70%" height="70%"}<br>
:::

::: footer
**Ejemplos de visualizaciones realizadas con datos de Eventing de Statsbomb**
:::

## Eventing + Tracking: Statsbomb 360

![](images/statsbomb_360.png){fig-align="center" width="70%" height="70%"}

::: footer
[Statsbomb 360](https://statsbomb.com/what-we-do/soccer-data/360-2/)
:::


## Datos abiertos de Tracking

::: {layout-ncol="2"}
[Metrica Sports](https://github.com/metrica-sports/sample-data) ![](images/metrica.png){fig-align="center"}

[Skill Corner](https://github.com/SkillCorner/opendata) ![](images/skill-corner.png){fig-align="center" width="90%" height="90%"}
:::

::: footer
**Son solo datos de ejemplo para conocer su formato y contenido**
:::

## Paquete de R {soccerAnimate}

::: {layout-ncol="2"}
![](images/soccerAnimate.png){fig-align="center" width="20%" height="20%"}

![](images/animation.gif){fig-align="center" width="50%" height="50%"}
:::

::: footer
[Enlace a Github](https://github.com/Dato-Futbol/soccerAnimate)
:::

## Web Scraping! {.smaller}

::: nonincremental
- [paquete de R {worldfootballR}](https://jaseziv.github.io/worldfootballR/index.html) <br> ![](images/worldfottballR.png){fig-align="center"}

- Variedad de fuentes: [Transfermarkt](https://www.transfermarkt.es) + [FBref](https://fbref.com/en/) + [Fotmob](https://www.fotmob.com) + [Understat](https://understat.com)
![](images/free.png){fig-align="center"}

:::

## Ejemplo 2: Transfermarkt {.smaller}

::: nonincremental
- [URL de referencia](https://www.transfermarkt.es/weltmeisterschaft-2022/teilnehmer/pokalwettbewerb/WM22/saison_id/2021)

- Código
```{r}
#install.packages("worldfootballR")
#devtools::install_github("JaseZiv/worldfootballR")
library(worldfootballR)
url_torneo = "https://www.transfermarkt.es/weltmeisterschaft-2022/teilnehmer/pokalwettbewerb/WM22/saison_id/2021"
selecciones = tm_league_team_urls(league_url = url_torneo, start_year = 2022)

```

- Data
```{r}
#| eval: true
#| echo: false
selecciones = read.table("data/selecciones.csv")
knitr::kable(selecciones %>% unlist(use.names = F)) %>% 
  kable_styling("striped", full_width = F, font_size = 12, position = "center") %>% 
  scroll_box(width = "99%", height = "250px")
```

::: footer
Documentación para decargar info. de [Transfermarkt](https://jaseziv.github.io/worldfootballR/articles/extract-transfermarkt-data.html)
:::

::: 

## Ejemplo 2: Transfermarkt {.smaller}

::: nonincremental
- Código

```{r}
library(dplyr)
library(stringr)

jugadores = NULL 
for(team_url in selecciones) {
  
  temp = tibble(player_url = tm_team_player_urls(team_url)) %>% 
         mutate(country_name = str_match(team_url, ".com/(.*?)/")[2])
  
  jugadores <- bind_rows(jugadores, temp)
}

```

- Data

```{r}
#| eval: true
#| echo: false

jugadores = read_csv("data/wc_player_urls.csv")
knitr::kable(jugadores) %>% 
  kable_styling("striped", full_width = F, font_size = 12, position = "center") %>% 
  scroll_box(width = "99%", height = "200px")
```

::: footer
Documentación para decargar info. de [Transfermarkt](https://jaseziv.github.io/worldfootballR/articles/extract-transfermarkt-data.html)
:::

:::

## Ejemplo 2: Transfermarkt {.smaller}

::: nonincremental
- Código

```{r}
library(purrr)
bio = map_df(jugadores$player_url, tm_player_bio)
```

- Data

```{r}
#| eval: true
#| echo: false
bio = read_csv("data/wc_player_bios.csv") %>% head(200)
knitr::kable(bio) %>% 
  kable_styling("striped", full_width = F, font_size = 12, position = "center") %>% 
  scroll_box(width = "99%", height = "350px")
```
::: footer
Documentación para decargar info. de [Transfermarkt](https://jaseziv.github.io/worldfootballR/articles/extract-transfermarkt-data.html)
:::

:::


## Ejemplo 2: Transfermarkt {.smaller}

```{r}
#| code-fold: true
library(ggplot2)
library(forcats)
library(ggrepel)
library(cowplot)

options(scipen = 8)
glimpse(bio)

data = bio %>% 
       left_join(jugadores, by = c("URL" = "player_url")) %>% 
       filter(!is.na(player_valuation)) %>% 
       group_by(country_name) %>% 
       mutate(rank = rank(-player_valuation, ties.method = "first"),
              most_common_citizenship = names(which.max(table(citizenship)))) %>% 
       filter(rank <= 23) %>%
       mutate(upper_bound = quantile(player_valuation, 0.75),
              lower_bound = quantile(player_valuation, 0.25),
              is_outlier = ifelse(player_valuation > (upper_bound + (upper_bound-lower_bound)*1.5), 1, 0)) %>% 
       ungroup() %>%
       mutate(player_value_M_EUR = player_valuation/1000000,
              group = case_when(country_name %in% c("katar", "ecuador", "niederlande", "senegal") ~ "A",
                                country_name %in% c("england", "iran", "vereinigte-staaten", "wales") ~ "B",
                                country_name %in% c("argentinien", "saudi-arabien", "mexiko", "polen") ~ "C",
                                country_name %in% c("danemark", "frankreich", "tunesien", "australien") ~ "D",
                                country_name %in% c("deutschland", "spanien", "costa-rica", "japan") ~ "E",
                                country_name %in% c("marokko", "kroatien", "belgien", "kanada") ~ "F",
                                country_name %in% c("schweiz", "kamerun", "brasilien", "serbien") ~ "G",
                                country_name %in% c("uruguay", "sudkorea", "portugal", "ghana") ~ "H"),
              country_name = str_replace(most_common_citizenship, " Jamaica", ""))

col_text_and_lines = "grey80"
col_background = "#252525"

p1 = ggplot(data, aes(x = fct_reorder(country_name, player_value_M_EUR), 
                 y = player_value_M_EUR, fill = group, col = group)) +
  geom_boxplot(alpha = 0.65) + 
  geom_text_repel(data %>% filter(is_outlier == 1), 
                  mapping = aes(label = player_name, col = group), size = 2) +
  scale_fill_brewer(palette = "Set1") +
  scale_colour_brewer(palette = "Set1") +
  scale_y_continuous(breaks = seq(0, 180, 20)) +
  coord_flip() +
  theme_bw() +
  guides(colour = "none",
         fill = guide_legend(nrow = 1, label.position = "top")) +
  labs(x = "", y = "\nValor de mercado\n[Millones de EUR]", fill = "Grupo",
       title = "Distribución de valor $ de mercado de las 32 selecciones en Qatar 2022",
       subtitle = "Se consideran los 23 jugadores mejor valorados de cada plantilla al 13-09-2022",
       caption = "Data: Transfermarkt - Viz: @DatoFutbol_cl") +
  theme(panel.background = element_rect(fill = col_background, colour = col_text_and_lines),
        plot.background = element_rect(fill = col_background, colour = "transparent"),
        legend.background = element_rect(fill = col_background, colour = "transparent"),
        legend.box.background = element_rect(fill = col_background, colour = "transparent"),
        panel.grid = element_line(colour = "grey20", size = 0.05),
        text = element_text(colour = col_text_and_lines, size = 10),
        axis.text.x = element_text(colour = col_text_and_lines),
        axis.text.y = element_text(colour = col_text_and_lines),
        legend.position = "top",
        legend.key = element_rect(fill = col_background),
        plot.margin = margin(1, 1, 0.5, 0.5, unit = "cm"))

p2 <- ggdraw() +
  draw_plot(p1) +
  draw_image("images/qatar.png",  x = 0.42, y = 0.41, scale = 0.12)
p2

ggsave("images/valores_qatar.png", height = 9, width = 12)
```

## {background-color="#252525" background-image="images/valores_qatar.png" background-size=70%}


## Ejemplo 3: FBref {.smaller}

::: nonincremental

- Código
```{r}
library(worldfootballR)
liga_url = fb_league_urls(country = "ENG", gender = "M", season_end_year = 2022, tier = "1st")
equipos =  fb_teams_urls(liga_url)
```

- Data
```{r}
#| eval: true
#| echo: false
equipos = read.table("data/equipos.csv")
knitr::kable(equipos %>% unlist(use.names = F)) %>% 
  kable_styling("striped", full_width = F, font_size = 12, position = "center") %>% 
  scroll_box(width = "99%", height = "250px")
```

::: footer
Documentación para decargar info. de [FBref](https://jaseziv.github.io/worldfootballR/articles/fbref-data-internationals.html)
:::

::: 


## Ejemplo 3: FBref {.smaller}

::: nonincremental
- Código

```{r}
jugadores_url = fb_player_urls(equipos[1])
```

- Data

```{r}
#| eval: true
#| echo: false

jugadores_url = read.table("data/MC_player_urls.csv")
knitr::kable(jugadores_url) %>% 
  kable_styling("striped", full_width = F, font_size = 12, position = "center") %>% 
  scroll_box(width = "99%", height = "200px")
```

::: footer
Documentación para decargar info. de [FBref](https://jaseziv.github.io/worldfootballR/articles/fbref-data-internationals.html)
:::

:::


## Ejemplo 3: FBref {.smaller}

::: nonincremental
- Código

```{r}
cancelo_PL2122_stats <- fb_player_scouting_report(player_url =jugadores_url[2], pos_versus = "primary") %>% 
                        filter(scouting_period == "2021-2022 Premier League")
```

- Data

```{r}
#| eval: true
#| echo: false
cancelo_PL2122_stats = read_csv("data/cancelo_PL2122_stats.csv")
knitr::kable(cancelo_PL2122_stats) %>% 
  kable_styling("striped", full_width = F, font_size = 12, position = "center") %>% 
  scroll_box(width = "99%", height = "350px")
```

::: footer
Documentación para decargar info. de [FBref](https://jaseziv.github.io/worldfootballR/articles/fbref-data-internationals.html)
:::

:::

## Ejemplo 3: FBref {.smaller}

```{r}
#| code-fold: true
library(ggplot2)
library(forcats)
library(glue)
library(ggtext)

options(scipen = 8)
target_metrics = c("Carries into Final Third", "Crosses", "Dribbles Completed", "Progressive Passes",
                   "xG Assisted", "Goals", "Non-Penalty xG", "Passes Under Pressure", "Switches",
                   "Tackles", "Successful Pressures", "Blocks", "Interceptions", "Clearances",
                   "Miscontrols", "Dispossessed", "Ball Recoveries", "Shots on target %", "Shots Total")

data = cancelo_PL2122_stats %>% 
       filter(Statistic %in% target_metrics) %>%
       distinct(Statistic, .keep_all = T) %>% 
       mutate(stat_group = case_when(StatGroup %in% c("Standard", "Shooting") ~ "Ataque",
                                     StatGroup %in% c("Passing", "Pass Types", "Possession") ~ "Posesión",
                                     StatGroup %in% c("Miscellaneous Stats", "Defense") ~ "Defensa"),
              stat_group = factor(stat_group, levels = c("Defensa", "Posesión", "Ataque")))

ggplot(data %>% filter(scouting_period == "2021-2022 Premier League"), 
       aes(x = Statistic, y = Percentile, fill = Percentile)) +
  geom_bar(stat = "identity", position = "dodge") +
  scale_y_continuous(limits = c(0, 100), breaks = seq(0, 100, 10), expand = c(0.012, 0)) +
  coord_flip() +
  theme_bw() +
  geom_hline(yintercept = 50, size = 1) +
  geom_hline(yintercept = c(25, 75), size = 0.5, col = "grey20", linetype = 'dotted') +
  geom_label(aes(label = Per90), fill = "white", size = 2.7, hjust = 0) +
  scale_fill_gradient2(low = "#f94144", mid = "#f9c74f", high = "#43aa8b",  
                       midpoint = 50, breaks = c(0, 25, 50, 75, 100), limits = c(0, 100)) +
  facet_grid(rows = vars(stat_group), scales = "free", switch = "y", space = "free_y") +
  labs(x = "", y = "",  
       title = glue("\nPerfil estadístico de {unique(data$Player)}\n{unique(data$BasedOnMinutes)} minutos jugados en M. City en la temporada 21-22 de Premier League"), 
       subtitle = "Percentiles obtenidos al comparar con los laterales de las 5 principales ligas de Europa y Torneos UEFA\n",
       caption = "Data: FBref - Las etiquetas muestran los valores cada 90 minutos.\nVisualización: @DatoFutbol_cl", fill = "Percentil") +
  theme(legend.position = "bottom",
        plot.margin = margin(0.5, 1, 0.5, 0.5, "cm"),
        panel.spacing.y = unit(0, "lines"),
        title = element_markdown(size = 12),
        strip.background = element_rect(fill = "white"),
        strip.text = element_text(size = 10, face = "bold"))
  
ggsave("images/barras_cancelo.png", width = 12, height = 9)

```

## {background-image="images/barras_cancelo.png" background-size=70%}

## Comentarios finales {.smaller}

- Hoy en día es posible acceder a distintos datos abiertos de manera directa o vía web scraping.

- En general, para acceder a ellos solo es necesario escribir unas pocas líneas de código. En caso de querer profundizar o personalizar una búsqueda, el paquete de R {[rvest](https://rvest.tidyverse.org)} puede ayudar.

- Los datos más avanzados (eventing y tracking) si bien no están actualizados, aun así con ellos es posible conocer su formato y contenido, permitiendo practicar y aprender sobre nuevas métricas y metodologías de análisis, modelamiento y visualización de datos aplicadas al fútbol.

- Los datos disponibles no están asociados únicamente a las principales competencias a nivel mundial sino que también a ligas de menor popularidad: [ligas FBref](https://raw.githubusercontent.com/JaseZiv/worldfootballR_data/master/raw-data/all_leages_and_cups/all_competitions.csv), [ligas Transfermarkt](https://raw.githubusercontent.com/JaseZiv/worldfootballR_data/master/raw-data/transfermarkt_leagues/main_comp_seasons.csv). Incluso es posible cruzarlas con [un identificador específico](https://github.com/JaseZiv/worldfootballR_data/blob/master/raw-data/fbref-tm-player-mapping/output/fbref_to_tm_mapping.csv).

## Comentarios finales {.smaller}

- Hay muchos tipos de datos útiles (no alcanzamos a revisar todo en los ejemplos):
  - Perfil personal de jugadores
  - Historial de valores de mercado, traspasos, información de contrato e información de lesiones
  - Performance en distintas competencias
  - Alineaciones y sustituciones en cada partido
  - Estadísticas a nivel de equipos
  - Etc...

## {background-color="#0096c7"}

:::{style="font-size: 80px; font-weight: bold; margin-top: 200px; text-align: center"}
Gracias!

:::
